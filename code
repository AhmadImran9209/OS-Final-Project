#include<iostream>
#include<random>
#include<algorithm> // for std::swap
#include<string>
#include <cstring>  // Add this line
using namespace std;
void player_disp(char p[]);

char p1[25];
char p2[25];
int p1_c = 0;
int p2_c = 0;
int score1 = 0, score2 = 0;
int Healing_score = 2;
int Courage_score = 2;
int invisibility_score = 2;
int strength_score = 2;
string name1 = "Healing", name2 = "Courage", name3 = "invisibility", name4 = "strength";


void player_disp(char p[]);
int random_no();
class Potion {
public:
    char Healing[2];
    char Courage[2];
    char invisibility[2];
    char strength[2];

    Potion() {
        for (int i = 0; i < 2; ++i)
            Healing[i] = ' ';
        for (int i = 0; i < 2; ++i)
            Courage[i] = ' ';
        for (int i = 0; i < 2; ++i)
            invisibility[i] = ' ';
        for (int i = 0; i < 2; ++i)
            strength[i] = ' ';
    }
    // Modify the disp_potion function to accept the size of the array
    void disp_potion(char arr[], int size) {
        for (int i = 0; i < size; ++i) {
            cout << arr[i] << " ";
        }
    }

    // Inside the Potion class, update the call to disp_potion
    void disp_potion(char arr[]) {
        int size = 0;

      if (strcmp(arr, Healing) == 0) {
        size = sizeof(Healing) / sizeof(Healing[0]);
    }
        else if (arr == Courage) {
            size = sizeof(Courage) / sizeof(Courage[0]);
        }
        else if (arr == invisibility) {
            size = sizeof(invisibility) / sizeof(invisibility[0]);
        }
        else if (arr == strength) {
            size = sizeof(strength) / sizeof(strength[0]);
        }

        disp_potion(arr, size);
    }
   void calculate_score(const char* potion_name, int player_number) {
    if (player_number == 1) {
        if (strcmp(potion_name, "Healing") == 0) {
            score1 += Healing_score;
        }
        else if (strcmp(potion_name, "Courage") == 0) {
            score1 += Courage_score;
        }
    }
    else if (player_number == 2) {
        if (strcmp(potion_name, "invisibility") == 0) {
            score2 += invisibility_score;
        }
        else if (strcmp(potion_name, "strength") == 0) {
            score2 += strength_score;
        }
    }
}

    bool isFull() {
         if (strcmp(Healing, "  ") == 0 && strcmp(Courage, "  ") == 0) {
        return true;  // Both Healing and Courage are full
    }
        else if (strcmp(invisibility, "  ") == 0 && strcmp(strength, "  ") == 0) {
            return true;  // Both Invisibility and Strength are full
        }
        else {
            return false;  // Neither combination is full
        }
    }

};


class Gameboard {
public:
    Potion potion1;
    Potion potion2;

    // Store which player has which potion
    int player1_potion_index1;
    int player1_potion_index2;
    int player2_potion_index1;
    int player2_potion_index2;

    Gameboard() : player1_potion_index1(0), player1_potion_index2(0),
        player2_potion_index1(0), player2_potion_index2(0) {}

    void add_marble_to_potion(char p[], int& player_count, int player_number) {
        int choice;
        char* selected_potion = nullptr;
        int* selected_index = nullptr;
        Potion* current_potion = nullptr;

        if (player_number == 1) {
            std::cout << "Player " << player_number << ", select a potion to add your marble to:" << std::endl;
            std::cout << "1. Healing" << std::endl;
            std::cout << "2. Courage" << std::endl;
            std::cin >> choice;

            if (choice == 1) {
                selected_index = &player1_potion_index1;
                current_potion = &potion1;
                selected_potion = potion1.Healing;
            }
            else if (choice == 2) {
                selected_index = &player1_potion_index2;
                current_potion = &potion1;
                selected_potion = potion1.Courage;
            }
            else {
                std::cout << "Invalid choice. Marble not added to any potion." << std::endl;
                return;
            }
        }
        else if (player_number == 2) {
            std::cout << "Player " << player_number << ", select a potion to add your marble to:" << std::endl;
            std::cout << "1. Invisibility" << std::endl;
            std::cout << "2. Strength" << std::endl;
            std::cin >> choice;

            if (choice == 1) {
                selected_index = &player2_potion_index1;
                current_potion = &potion2;
                selected_potion = potion2.invisibility;
            }
            else if (choice == 2) {
                selected_index = &player2_potion_index2;
                current_potion = &potion2;
                selected_potion = potion2.strength;
            }
            else {
                std::cout << "Invalid choice. Marble not added to any potion." << std::endl;
                return;
            }
        }
        else {
            std::cout << "Invalid player number. Marble not added to any potion." << std::endl;
            return;
        }


        if (*selected_index < sizeof(selected_potion) / sizeof(selected_potion[0])) {
            // Check if the potion is not full
            if (*selected_index < sizeof(selected_potion) / sizeof(selected_potion[0])) {
                // Add the marble to the selected potion
                selected_potion[*selected_index] = p[0];

                // Increment the index for the selected potion
                ++(*selected_index);

                // Remove the marble from the player's container
                for (int i = 0; i < player_count - 1; ++i) {
                    p[i] = p[i + 1];
                }

                // Decrement the count to reflect the removal
                --player_count;

                std::cout << "Marble added to the selected potion successfully!" << std::endl;

                // Display the updated potion
                std::cout << "Updated " << ((player_number == 1) ? "Healing" : "Invisibility") << " potion: ";
                current_potion->disp_potion(selected_potion, *selected_index);
                std::cout << std::endl;
            }

            // Check if the potion is full
            if (*selected_index == sizeof(selected_potion) / sizeof(selected_potion[0])) {
                std::cout << "Potion is full!" << std::endl;

                // Call calculate_score to update player's score
                current_potion->calculate_score((choice == 1) ? "Healing" : "Strength", player_number);

                // Reset the completed potion
                reset_potion(selected_potion, selected_index);

                // Return when the potion is full
                return;
            }
        }
        else {
            std::cout << "Selected potion is full. Marble not added." << std::endl;
        }
    }

    void reset_potion(char arr[], int* index) {
    std::memset(arr, ' ', *index);
    *index = 0;
}
};
int random_no() {
    std::random_device rd;
    std::mt19937 eng(rd());
    std::uniform_int_distribution<> distr(0, 4);
    return distr(eng);
}

struct Marble {
    char color[5] = { 'R', 'Y', 'B', 'G', 'W' };
};

class Dispenser {
    char grid[5][5] = { " " };
    Marble m;
    char helper = ' ';

public:
    void init_grid() {
        for (int i = 0; i < 5; ++i) {
            for (int j = 0; j < 5; ++j) {
                grid[i][j] = m.color[random_no()];
            }
        }
    }

    void pick_marble(char p[], int* current_player_count, int current_players) {
        int row, col;
        char pick_color;

        cout << "Enter row (-1 to exit): ";
        cin >> row;

        if (row == -1) {
            exit(0);
        }

        cout << "Enter col: ";
        cin >> col;

        pick_color = grid[row][col];
        helper = pick_color;
        grid[row][col] = 'x';
        pick_consecutive_marbles(row, col, pick_color, p, current_player_count, current_players);
        disp_grid();
    }

    char* save_to_container(char p[], int i) {
        p[i] = helper;
        cout << "Checking from save func: " << endl;
        return p;
    }

    void pick_consecutive_marbles(int row, int col, char color, char* current_player_container, int* current_player_count, int current_player) {
        char pickedColor = color;

        // Check below the picked marble
        for (int i = row + 1; i < 5 && grid[i][col] == pickedColor; ++i) {
            grid[i][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
        }

        // Check above the picked marble
        for (int i = row - 1; i >= 0 && grid[i][col] == pickedColor; --i) {
            grid[i][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
        }

        // Check if both above and below marbles have been picked
        int aboveRow = row - 1;
        int belowRow = row + 1;

        while (aboveRow >= 0 && grid[aboveRow][col] == pickedColor) {
            cout << "Picked marble with color: " << pickedColor << " at position (" << aboveRow << ", " << col << ")" << endl;
            grid[aboveRow][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
            --aboveRow;
        }

        while (belowRow < 5 && grid[belowRow][col] == pickedColor) {
            cout << "Picked marble with color: " << pickedColor << " at position (" << belowRow << ", " << col << ")" << endl;
            grid[belowRow][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
            ++belowRow;
        }

        // After placing 'x', check the grid to slide the 'x' upwards
        check_grid(col);

        // Print the picked marbles in the container of the current player
        cout << "\nIn player " << current_player << " container: " << endl;
        player_disp(current_player_container);
    }

s
    }

    void slide_marble(int i, int j) {
        while (i > 0 && grid[i][j] == 'x') {
            swap(grid[i - 1][j], grid[i][j]);
            --i;
        }
    }

 check

    void return_to_dispenser(char p[], int& count) {
        cout << "Returning marbles to dispenser..." << endl;

        for (int i = 0; i < count; ++i) {
            char returnedMarble = p[i];
            int row = 0, col = 0;

            // Find a position marked with 'x' in the dispenser
            do {
                row = random_no();
                col = random_no();
            } while (grid[row][col] != 'x');
            // Place the returned marble in the dispenser
            grid[row][col] = returnedMarble;
        }

        // Reset the player's container
        count = 0;
    }

    char pick_from_container(char p[], int& count) {
        if (count == 0) {
            cout << "No marbles to pick. Container is empty." << endl;
            return '\0';
        }
        int index;
        cout << "Enter the index to pick a marble (0 to " << count - 1 << "): ";
        cin >> index;
        if (index < 0 || index >= count) {
            cout << "Invalid index. Please enter a valid index." << endl;
            return '\0';
        }
        char pickedMarble = p[index];
        cout << "Picked marble from index " << index << ": " << pickedMarble << endl;
        // Remove the picked marble from the container
        for (int i = index; i < count - 1; ++i) {
            p[i] = p[i + 1];
        }
        // Decrement the count to reflect the removal
        --count;
        return pickedMarble;
    }

    char pick_from_index(char p[], int& count, int index) {
        if (count == 0) {
            cout << "No marbles to pick. Container is empty." << endl;
            return '\0';
        }

        if (index < 0 || index >= count) {
            cout << "Invalid index. Please enter a valid index." << endl;
            return '\0';
        }

        char pickedMarble = p[index];
        cout << "Picked marble from index " << index << ": " << pickedMarble << endl;

        // Remove the picked marble from the container
        for (int i = index; i < count - 1; ++i) {
            p[i] = p[i + 1];
        }

        // Decrement the count to reflect the removal
        --count;

        return pickedMarble;
    }

};

void player1(Dispenser* obj) {
    cout << "Player 1 turn: " << endl;
    obj->pick_marble(p1, &p1_c, 1);  // Pass the address of p1_c
    obj->save_to_container(p1, p1_c);
    ++p1_c;
}

void player2(Dispenser* obj) {
    cout << "Player 2 turn: " << endl;
    obj->pick_marble(p2, &p2_c, 2);  // Pass the address of p2_c
    obj->save_to_container(p2, p2_c);
    ++p2_c;
}

void player_disp(char p[]) {
    for (int i = 0; p[i] != '\0'; ++i) {
        cout << p[i] << ' ';
    }
    cout << endl;
}

void display_player_potions(Gameboard& gameboard) {
    cout << "Player 1 has potions: " << name1 << ": " << gameboard.potion1.Healing[gameboard.player1_potion_index1]
        << ", " << name2 << ": " << gameboard.potion1.Courage[gameboard.player1_potion_index2] << endl;

    cout << "Player 2 has potions: " << name1 << ": " << gameboard.potion2.Healing[gameboard.player2_potion_index1]
        << ", " << name2 << ": " << gameboard.potion2.Courage[gameboard.player2_potion_index2] << endl;
}

void player_turn(Dispenser* obj, Gameboard& gameboard) {
    int ex = 0;
    int current_player = 1; // Start with Player 1
    while (ex != -1) {
        cout << "Press -1 to exit, 0 to continue, 1 to return marbles, 2 to pick from container, 3 pick from a specific index in the player's container (p1 or p2): ";
        cin >> ex;

        if (ex == -1) {
            exit(0);
        }
        else if (ex == 1) {
            cout << "Choose player (1 or 2) to return marbles: ";
            int player;
            cin >> player;
            if (player == 1) {
                obj->return_to_dispenser(p1, p1_c);
            }
            else if (player == 2) {
                obj->return_to_dispenser(p2, p2_c);
            }
        }
        else if (ex == 2) {
            cout << "Choose player (1 or 2) to pick from container: ";
            int player = 0;
            cin >> player;
            char marble = ' ';
            if (player == 1) {
                marble = obj->pick_from_container(p1, p1_c);
            }
            else if (player == 2) {
                marble = obj->pick_from_container(p2, p2_c);
            }
            // Add the picked marble to the potion
            gameboard.add_marble_to_potion(&marble, (player == 1) ? p1_c : p2_c, player);
        }
        else if (ex == 3) {
            cout << "Choose player (1 or 2) and enter index to pick from container: ";
            int player, index;
            cin >> player >> index;

            char marble = ' ';
            if (player == 1) {
                marble = obj->pick_from_index(p1, p1_c, index);
            }
            else if (player == 2) {
                marble = obj->pick_from_index(p2, p2_c, index);
            }
            // Add the picked marble to the potion
            gameboard.add_marble_to_potion(&marble, (player == 1) ? p1_c : p2_c, player);
        }

        obj->disp_grid();
        if (current_player == 1 && gameboard.potion1.isFull()) {
            cout << "Player 1 wins! Potion is full." << endl;
            exit(0); // Terminate the game
        }
        else if (current_player == 2 && gameboard.potion2.isFull()) {
            cout << "Player 2 wins! Potion is full." << endl;
            exit(0); // Terminate the game
        }

        if (current_player == 1) {
            player1(obj);
            cout << "\nIn player 1 grid: " << endl;
            player_disp(p1);
            current_player = 2; // Switch to Player 2
        }
        else {
            player2(obj);
            cout << "\nIn player 2 grid: " << endl;
            player_disp(p2);
            current_player = 1; // Switch to Player 1
        }
    }
}


int main() {
    Dispenser obj;
    obj.init_grid();

    Gameboard gameboard;

    display_player_potions(gameboard);

    player_turn(&obj, gameboard);

    cout << "\nplayer 1 grid: " << endl;
    player_disp(p1);
    cout << "\nplayer 2 grid: " << endl;
    player_disp(p2);

    return 0;
}
























Code 2
#include<iostream>
#include<random>
#include<algorithm> // for std::swap
#include<string>
#include <cstring>  // Add this line
#include<mutex>
#include<thread>
using namespace std;
void player_disp(char p[]);

char p1[25];
char p2[25];
int p1_c = 0;
int p2_c = 0;
int score1 = 0, score2 = 0;
int Healing_score = 2;
int Courage_score = 2;
int invisibility_score = 2;
int strength_score = 2;
string name1 = "Healing", name2 = "Courage", name3 = "invisibility", name4 = "strength";


void player_disp(char p[]);
int random_no();
class Potion {
public:
    char Healing[2];
    char Courage[2];
    char invisibility[2];
    char strength[2];

    Potion() {
        for (int i = 0; i < 2; ++i)
            Healing[i] = ' ';
        for (int i = 0; i < 2; ++i)
            Courage[i] = ' ';
        for (int i = 0; i < 2; ++i)
            invisibility[i] = ' ';
        for (int i = 0; i < 2; ++i)
            strength[i] = ' ';
    }
    // Modify the disp_potion function to accept the size of the array
    void disp_potion(char arr[], int size) {
        for (int i = 0; i < size; ++i) {
            cout << arr[i] << " ";
        }
    }

    // Inside the Potion class, update the call to disp_potion
    void disp_potion(char arr[]) {
        int size = 0;

      if (strcmp(arr, Healing) == 0) {
        size = sizeof(Healing) / sizeof(Healing[0]);
    }
        else if (arr == Courage) {
            size = sizeof(Courage) / sizeof(Courage[0]);
        }
        else if (arr == invisibility) {
            size = sizeof(invisibility) / sizeof(invisibility[0]);
        }
        else if (arr == strength) {
            size = sizeof(strength) / sizeof(strength[0]);
        }

        disp_potion(arr, size);
    }
   void calculate_score(const char* potion_name, int player_number) {
    if (player_number == 1) {
        if (strcmp(potion_name, "Healing") == 0) {
            score1 += Healing_score;
        }
        else if (strcmp(potion_name, "Courage") == 0) {
            score1 += Courage_score;
        }
    }
    else if (player_number == 2) {
        if (strcmp(potion_name, "invisibility") == 0) {
            score2 += invisibility_score;
        }
        else if (strcmp(potion_name, "strength") == 0) {
            score2 += strength_score;
        }
    }
}

    bool isFull() {
         if (strcmp(Healing, "  ") == 0 && strcmp(Courage, "  ") == 0) {
        return true;  // Both Healing and Courage are full
    }
        else if (strcmp(invisibility, "  ") == 0 && strcmp(strength, "  ") == 0) {
            return true;  // Both Invisibility and Strength are full
        }
        else {
            return false;  // Neither combination is full
        }
    }

};


class Gameboard {
public:
    Potion potion1;
    Potion potion2;

    // Store which player has which potion
    int player1_potion_index1;
    int player1_potion_index2;
    int player2_potion_index1;
    int player2_potion_index2;

    Gameboard() : player1_potion_index1(0), player1_potion_index2(0),
        player2_potion_index1(0), player2_potion_index2(0) {}

    void add_marble_to_potion(char p[], int& player_count, int player_number) {
        int choice;
        char* selected_potion = nullptr;
        int* selected_index = nullptr;
        Potion* current_potion = nullptr;

        if (player_number == 1) {
            std::cout << "Player " << player_number << ", select a potion to add your marble to:" << std::endl;
            std::cout << "1. Healing" << std::endl;
            std::cout << "2. Courage" << std::endl;
            std::cin >> choice;

            if (choice == 1) {
                selected_index = &player1_potion_index1;
                current_potion = &potion1;
                selected_potion = potion1.Healing;
            }
            else if (choice == 2) {
                selected_index = &player1_potion_index2;
                current_potion = &potion1;
                selected_potion = potion1.Courage;
            }
            else {
                std::cout << "Invalid choice. Marble not added to any potion." << std::endl;
                return;
            }
        }
        else if (player_number == 2) {
            std::cout << "Player " << player_number << ", select a potion to add your marble to:" << std::endl;
            std::cout << "1. Invisibility" << std::endl;
            std::cout << "2. Strength" << std::endl;
            std::cin >> choice;

            if (choice == 1) {
                selected_index = &player2_potion_index1;
                current_potion = &potion2;
                selected_potion = potion2.invisibility;
            }
            else if (choice == 2) {
                selected_index = &player2_potion_index2;
                current_potion = &potion2;
                selected_potion = potion2.strength;
            }
            else {
                std::cout << "Invalid choice. Marble not added to any potion." << std::endl;
                return;
            }
        }
        else {
            std::cout << "Invalid player number. Marble not added to any potion." << std::endl;
            return;
        }


        if (*selected_index < sizeof(selected_potion) / sizeof(selected_potion[0])) {
            // Check if the potion is not full
            if (*selected_index < sizeof(selected_potion) / sizeof(selected_potion[0])) {
                // Add the marble to the selected potion
                selected_potion[*selected_index] = p[0];

                // Increment the index for the selected potion
                ++(*selected_index);

                // Remove the marble from the player's container
                for (int i = 0; i < player_count - 1; ++i) {
                    p[i] = p[i + 1];
                }

                // Decrement the count to reflect the removal
                --player_count;

                std::cout << "Marble added to the selected potion successfully!" << std::endl;

                // Display the updated potion
                std::cout << "Updated " << ((player_number == 1) ? "Healing" : "Invisibility") << " potion: ";
                current_potion->disp_potion(selected_potion, *selected_index);
                std::cout << std::endl;
            }

            // Check if the potion is full
            if (*selected_index == sizeof(selected_potion) / sizeof(selected_potion[0])) {
                std::cout << "Potion is full!" << std::endl;

                // Call calculate_score to update player's score
                current_potion->calculate_score((choice == 1) ? "Healing" : "Strength", player_number);

                // Reset the completed potion
                reset_potion(selected_potion, selected_index);

                // Return when the potion is full
                return;
            }
        }
        else {
            std::cout << "Selected potion is full. Marble not added." << std::endl;
        }
    }

    void reset_potion(char arr[], int* index) {
    std::memset(arr, ' ', *index);
    *index = 0;
}
};
int random_no() {
    std::random_device rd;
    std::mt19937 eng(rd());
    std::uniform_int_distribution<> distr(0, 4);
    return distr(eng);
}

struct Marble {
    char color[5] = { 'R', 'Y', 'B', 'G', 'W' };
};

class Dispenser {
    char grid[5][5] = { " " };
    Marble m;
    char helper = ' ';

public:
    void init_grid() {
        for (int i = 0; i < 5; ++i) {
            for (int j = 0; j < 5; ++j) {
                grid[i][j] = m.color[random_no()];
            }
        }
    }

    void pick_marble(char p[], int* current_player_count, int current_players) {
        int row, col;
        char pick_color;

        cout << "Enter row (-1 to exit): ";
        cin >> row;

        if (row == -1) {
            exit(0);
        }

        cout << "Enter col: ";
        cin >> col;

        pick_color = grid[row][col];
        helper = pick_color;
        grid[row][col] = 'x';
        pick_consecutive_marbles(row, col, pick_color, p, current_player_count, current_players);
        disp_grid();
    }

    char* save_to_container(char p[], int i) {
        p[i] = helper;
        cout << "Checking from save func: " << endl;
        return p;
    }

    void pick_consecutive_marbles(int row, int col, char color, char* current_player_container, int* current_player_count, int current_player) {
        char pickedColor = color;

        // Check below the picked marble
        for (int i = row + 1; i < 5 && grid[i][col] == pickedColor; ++i) {
            grid[i][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
        }

        // Check above the picked marble
        for (int i = row - 1; i >= 0 && grid[i][col] == pickedColor; --i) {
            grid[i][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
        }

        // Check if both above and below marbles have been picked
        int aboveRow = row - 1;
        int belowRow = row + 1;

        while (aboveRow >= 0 && grid[aboveRow][col] == pickedColor) {
            cout << "Picked marble with color: " << pickedColor << " at position (" << aboveRow << ", " << col << ")" << endl;
            grid[aboveRow][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
            --aboveRow;
        }

        while (belowRow < 5 && grid[belowRow][col] == pickedColor) {
            cout << "Picked marble with color: " << pickedColor << " at position (" << belowRow << ", " << col << ")" << endl;
            grid[belowRow][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
            ++belowRow;
        }

        // After placing 'x', check the grid to slide the 'x' upwards
        check_grid(col);

        // Print the picked marbles in the container of the current player
        cout << "\nIn player " << current_player << " container: " << endl;
        player_disp(current_player_container);
    }

    void check_grid(int j) {
        for (int i = 0; i < 5; ++i) {
            if (grid[i][j] == 'x') {
                slide_marble(i, j);
            }
        }
    }

    void slide_marble(int i, int j) {
        while (i > 0 && grid[i][j] == 'x') {
            swap(grid[i - 1][j], grid[i][j]);
            --i;
        }
    }

    void disp_grid() {
        cout << "  ";
        for (int j = 0; j < 5; ++j) {
            cout << j << " ";
        }
        cout << endl;

        for (int i = 0; i < 5; ++i) {
            cout << i << " ";
            for (int j = 0; j < 5; ++j) {
                cout << grid[i][j] << " ";
            }
            cout << endl;
        }
    }

    void return_to_dispenser(char p[], int& count) {
        cout << "Returning marbles to dispenser..." << endl;

        for (int i = 0; i < count; ++i) {
            char returnedMarble = p[i];
            int row = 0, col = 0;

            // Find a position marked with 'x' in the dispenser
            do {
                row = random_no();
                col = random_no();
            } while (grid[row][col] != 'x');
            // Place the returned marble in the dispenser
            grid[row][col] = returnedMarble;
        }

        // Reset the player's container
        count = 0;
    }

    char pick_from_container(char p[], int& count) {
        if (count == 0) {
            cout << "No marbles to pick. Container is empty." << endl;
            return '\0';
        }
        int index;
        cout << "Enter the index to pick a marble (0 to " << count - 1 << "): ";
        cin >> index;
        if (index < 0 || index >= count) {
            cout << "Invalid index. Please enter a valid index." << endl;
            return '\0';
        }
        char pickedMarble = p[index];
        cout << "Picked marble from index " << index << ": " << pickedMarble << endl;
        // Remove the picked marble from the container
        for (int i = index; i < count - 1; ++i) {
            p[i] = p[i + 1];
        }
        // Decrement the count to reflect the removal
        --count;
        return pickedMarble;
    }

    char pick_from_index(char p[], int& count, int index) {
        if (count == 0) {
            cout << "No marbles to pick. Container is empty." << endl;
            return '\0';
        }

        if (index < 0 || index >= count) {
            cout << "Invalid index. Please enter a valid index." << endl;
            return '\0';
        }

        char pickedMarble = p[index];
        cout << "Picked marble from index " << index << ": " << pickedMarble << endl;

        // Remove the picked marble from the container
        for (int i = index; i < count - 1; ++i) {
            p[i] = p[i + 1];
        }

        // Decrement the count to reflect the removal
        --count;

        return pickedMarble;
    }

};

void player1(Dispenser* obj) {
    cout << "Player 1 turn: " << endl;
    obj->pick_marble(p1, &p1_c, 1);  // Pass the address of p1_c
    obj->save_to_container(p1, p1_c);
    ++p1_c;
}

void player2(Dispenser* obj) {
    cout << "Player 2 turn: " << endl;
    obj->pick_marble(p2, &p2_c, 2);  // Pass the address of p2_c
    obj->save_to_container(p2, p2_c);
    ++p2_c;
}

void player_disp(char p[]) {
    for (int i = 0; p[i] != '\0'; ++i) {
        cout << p[i] << ' ';
    }
    cout << endl;
}

void display_player_potions(Gameboard& gameboard) {
    cout << "Player 1 has potions: " << name1 << ": " << gameboard.potion1.Healing[gameboard.player1_potion_index1]
        << ", " << name2 << ": " << gameboard.potion1.Courage[gameboard.player1_potion_index2] << endl;

    cout << "Player 2 has potions: " << name1 << ": " << gameboard.potion2.Healing[gameboard.player2_potion_index1]
        << ", " << name2 << ": " << gameboard.potion2.Courage[gameboard.player2_potion_index2] << endl;
}

void player_turn(Dispenser* obj, Gameboard& gameboard) {
    int ex = 0;
    int current_player = 1; // Start with Player 1
    while (ex != -1) {
        cout << "Press -1 to exit, 0 to continue, 1 to return marbles, 2 to pick from container, 3 pick from a specific index in the player's container (p1 or p2): ";
        cin >> ex;

        if (ex == -1) {
            exit(0);
        }
        else if (ex == 1) {
            cout << "Choose player (1 or 2) to return marbles: ";
            int player;
            cin >> player;
            if (player == 1) {
                obj->return_to_dispenser(p1, p1_c);
            }
            else if (player == 2) {
                obj->return_to_dispenser(p2, p2_c);
            }
        }
        else if (ex == 2) {
            cout << "Choose player (1 or 2) to pick from container: ";
            int player = 0;
            cin >> player;
            char marble = ' ';
            if (player == 1) {
                marble = obj->pick_from_container(p1, p1_c);
            }
            else if (player == 2) {
                marble = obj->pick_from_container(p2, p2_c);
            }
            // Add the picked marble to the potion
            gameboard.add_marble_to_potion(&marble, (player == 1) ? p1_c : p2_c, player);
        }
        else if (ex == 3) {
            cout << "Choose player (1 or 2) and enter index to pick from container: ";
            int player, index;
            cin >> player >> index;

            char marble = ' ';
            if (player == 1) {
                marble = obj->pick_from_index(p1, p1_c, index);
            }
            else if (player == 2) {
                marble = obj->pick_from_index(p2, p2_c, index);
            }
            // Add the picked marble to the potion
            gameboard.add_marble_to_potion(&marble, (player == 1) ? p1_c : p2_c, player);
        }

        obj->disp_grid();
        if (current_player == 1 && gameboard.potion1.isFull()) {
            cout << "Player 1 wins! Potion is full." << endl;
            exit(0); // Terminate the game
        }
        else if (current_player == 2 && gameboard.potion2.isFull()) {
            cout << "Player 2 wins! Potion is full." << endl;
            exit(0); // Terminate the game
        }

        if (current_player == 1) {
            player1(obj);
            cout << "\nIn player 1 grid: " << endl;
            player_disp(p1);
            current_player = 2; // Switch to Player 2
        }
        else {
            player2(obj);
            cout << "\nIn player 2 grid: " << endl;
            player_disp(p2);
            current_player = 1; // Switch to Player 1
        }
    }
}


int main() {
    Dispenser obj;
    obj.init_grid();

    Gameboard gameboard;

    display_player_potions(gameboard);

    player_turn(&obj, gameboard);

    cout << "\nplayer 1 grid: " << endl;
    player_disp(p1);
    cout << "\nplayer 2 grid: " << endl;
    player_disp(p2);

    return 0;
}




















Code 3
#include<iostream>
#include<random>
#include<algorithm> // for std::swap
#include<string>
#include <cstring>  // Add this line
#include<mutex>
#include<thread>
using namespace std;
void player_disp(char p[]);

char p1[25];
char p2[25];
int p1_c = 0;
int p2_c = 0;
int score1 = 0, score2 = 0;
int Healing_score = 2;
int Courage_score = 2;
int invisibility_score = 2;
int strength_score = 2;
string name1 = "Healing", name2 = "Courage", name3 = "invisibility", name4 = "strength";

mutex mtx;

void player_disp(char p[]);
int random_no();
class Potion {
public:
    char Healing[2];
    char Courage[2];
    char invisibility[2];
    char strength[2];

    Potion() {
        for (int i = 0; i < 2; ++i)
            Healing[i] = ' ';
        for (int i = 0; i < 2; ++i)
            Courage[i] = ' ';
        for (int i = 0; i < 2; ++i)
            invisibility[i] = ' ';
        for (int i = 0; i < 2; ++i)
            strength[i] = ' ';
    }
    // Modify the disp_potion function to accept the size of the array
    void disp_potion(char arr[], int size) {
        for (int i = 0; i < size; ++i) {
            cout << arr[i] << " ";
        }
    }

    // Inside the Potion class, update the call to disp_potion
    void disp_potion(char arr[]) {
        int size = 0;

      if (strcmp(arr, Healing) == 0) {
        size = sizeof(Healing) / sizeof(Healing[0]);
    }
        else if (arr == Courage) {
            size = sizeof(Courage) / sizeof(Courage[0]);
        }
        else if (arr == invisibility) {
            size = sizeof(invisibility) / sizeof(invisibility[0]);
        }
        else if (arr == strength) {
            size = sizeof(strength) / sizeof(strength[0]);
        }

        disp_potion(arr, size);
    }
   void calculate_score(const char* potion_name, int player_number) {
    if (player_number == 1) {
        if (strcmp(potion_name, "Healing") == 0) {
            score1 += Healing_score;
        }
        else if (strcmp(potion_name, "Courage") == 0) {
            score1 += Courage_score;
        }
    }
    else if (player_number == 2) {
        if (strcmp(potion_name, "invisibility") == 0) {
            score2 += invisibility_score;
        }
        else if (strcmp(potion_name, "strength") == 0) {
            score2 += strength_score;
        }
    }
}

    bool isFull() {
         if (strcmp(Healing, "  ") == 0 && strcmp(Courage, "  ") == 0) {
        return true;  // Both Healing and Courage are full
    }
        else if (strcmp(invisibility, "  ") == 0 && strcmp(strength, "  ") == 0) {
            return true;  // Both Invisibility and Strength are full
        }
        else {
            return false;  // Neither combination is full
        }
    }

};


class Gameboard {
public:
    Potion potion1;
    Potion potion2;

    // Store which player has which potion
    int player1_potion_index1;
    int player1_potion_index2;
    int player2_potion_index1;
    int player2_potion_index2;

    Gameboard() : player1_potion_index1(0), player1_potion_index2(0),
        player2_potion_index1(0), player2_potion_index2(0) {}

    void add_marble_to_potion(char p[], int& player_count, int player_number) {
        int choice;
        char* selected_potion = nullptr;
        int* selected_index = nullptr;
        Potion* current_potion = nullptr;

        if (player_number == 1) {
            std::cout << "Player " << player_number << ", select a potion to add your marble to:" << std::endl;
            std::cout << "1. Healing" << std::endl;
            std::cout << "2. Courage" << std::endl;
            std::cin >> choice;

            if (choice == 1) {
                selected_index = &player1_potion_index1;
                current_potion = &potion1;
                selected_potion = potion1.Healing;
            }
            else if (choice == 2) {
                selected_index = &player1_potion_index2;
                current_potion = &potion1;
                selected_potion = potion1.Courage;
            }
            else {
                std::cout << "Invalid choice. Marble not added to any potion." << std::endl;
                return;
            }
        }
        else if (player_number == 2) {
            std::cout << "Player " << player_number << ", select a potion to add your marble to:" << std::endl;
            std::cout << "1. Invisibility" << std::endl;
            std::cout << "2. Strength" << std::endl;
            std::cin >> choice;

            if (choice == 1) {
                selected_index = &player2_potion_index1;
                current_potion = &potion2;
                selected_potion = potion2.invisibility;
            }
            else if (choice == 2) {
                selected_index = &player2_potion_index2;
                current_potion = &potion2;
                selected_potion = potion2.strength;
            }
            else {
                std::cout << "Invalid choice. Marble not added to any potion." << std::endl;
                return;
            }
        }
        else {
            std::cout << "Invalid player number. Marble not added to any potion." << std::endl;
            return;
        }


        if (*selected_index < sizeof(selected_potion) / sizeof(selected_potion[0])) {
            // Check if the potion is not full
            if (*selected_index < sizeof(selected_potion) / sizeof(selected_potion[0])) {
                // Add the marble to the selected potion
                selected_potion[*selected_index] = p[0];

                // Increment the index for the selected potion
                ++(*selected_index);

                // Remove the marble from the player's container
                for (int i = 0; i < player_count - 1; ++i) {
                    p[i] = p[i + 1];
                }

                // Decrement the count to reflect the removal
                --player_count;

                std::cout << "Marble added to the selected potion successfully!" << std::endl;

                // Display the updated potion
                std::cout << "Updated " << ((player_number == 1) ? "Healing" : "Invisibility") << " potion: ";
                current_potion->disp_potion(selected_potion, *selected_index);
                std::cout << std::endl;
            }

            // Check if the potion is full
            if (*selected_index == sizeof(selected_potion) / sizeof(selected_potion[0])) {
                std::cout << "Potion is full!" << std::endl;

                // Call calculate_score to update player's score
                current_potion->calculate_score((choice == 1) ? "Healing" : "Strength", player_number);

                // Reset the completed potion
                reset_potion(selected_potion, selected_index);

                // Return when the potion is full
                return;
            }
        }
        else {
            std::cout << "Selected potion is full. Marble not added." << std::endl;
        }
    }

    void reset_potion(char arr[], int* index) {
    std::memset(arr, ' ', *index);
    *index = 0;
}
};
int random_no() {
    std::random_device rd;
    std::mt19937 eng(rd());
    std::uniform_int_distribution<> distr(0, 4);
    return distr(eng);
}

struct Marble {
    char color[5] = { 'R', 'Y', 'B', 'G', 'W' };
};

class Dispenser {
    char grid[5][5] = { " " };
    Marble m;
    char helper = ' ';

public:
    void init_grid() {
        for (int i = 0; i < 5; ++i) {
            for (int j = 0; j < 5; ++j) {
                grid[i][j] = m.color[random_no()];
            }
        }
    }

    void pick_marble(char p[], int* current_player_count, int current_players) {
        int row, col;
        char pick_color;

        cout << "Enter row (-1 to exit): ";
        cin >> row;

        if (row == -1) {
            exit(0);
        }

        cout << "Enter col: ";
        cin >> col;

        pick_color = grid[row][col];
        helper = pick_color;
        grid[row][col] = 'x';
        pick_consecutive_marbles(row, col, pick_color, p, current_player_count, current_players);
        disp_grid();
    }

    char* save_to_container(char p[], int i) {
        p[i] = helper;
        cout << "Checking from save func: " << endl;
        return p;
    }

    void pick_consecutive_marbles(int row, int col, char color, char* current_player_container, int* current_player_count, int current_player) {
        char pickedColor = color;

        // Check below the picked marble
        for (int i = row + 1; i < 5 && grid[i][col] == pickedColor; ++i) {
            grid[i][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
        }

        // Check above the picked marble
        for (int i = row - 1; i >= 0 && grid[i][col] == pickedColor; --i) {
            grid[i][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
        }

        // Check if both above and below marbles have been picked
        int aboveRow = row - 1;
        int belowRow = row + 1;

        while (aboveRow >= 0 && grid[aboveRow][col] == pickedColor) {
            cout << "Picked marble with color: " << pickedColor << " at position (" << aboveRow << ", " << col << ")" << endl;
            grid[aboveRow][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
            --aboveRow;
        }

        while (belowRow < 5 && grid[belowRow][col] == pickedColor) {
            cout << "Picked marble with color: " << pickedColor << " at position (" << belowRow << ", " << col << ")" << endl;
            grid[belowRow][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
            ++belowRow;
        }

        // After placing 'x', check the grid to slide the 'x' upwards
        check_grid(col);

        // Print the picked marbles in the container of the current player
        cout << "\nIn player " << current_player << " container: " << endl;
        player_disp(current_player_container);
    }

    void check_grid(int j) {
        for (int i = 0; i < 5; ++i) {
            if (grid[i][j] == 'x') {
                slide_marble(i, j);
            }
        }
    }

    void slide_marble(int i, int j) {
        while (i > 0 && grid[i][j] == 'x') {
            swap(grid[i - 1][j], grid[i][j]);
            --i;
        }
    }

    void disp_grid() {
        cout << "  ";
        for (int j = 0; j < 5; ++j) {
            cout << j << " ";
        }
        cout << endl;

        for (int i = 0; i < 5; ++i) {
            cout << i << " ";
            for (int j = 0; j < 5; ++j) {
                cout << grid[i][j] << " ";
            }
            cout << endl;
        }
    }

    void return_to_dispenser(char p[], int& count) {
        cout << "Returning marbles to dispenser..." << endl;

        for (int i = 0; i < count; ++i) {
            char returnedMarble = p[i];
            int row = 0, col = 0;

            // Find a position marked with 'x' in the dispenser
            do {
                row = random_no();
                col = random_no();
            } while (grid[row][col] != 'x');
            // Place the returned marble in the dispenser
            grid[row][col] = returnedMarble;
        }

        // Reset the player's container
        count = 0;
    }

    char pick_from_container(char p[], int& count) {
        if (count == 0) {
            cout << "No marbles to pick. Container is empty." << endl;
            return '\0';
        }
        int index;
        cout << "Enter the index to pick a marble (0 to " << count - 1 << "): ";
        cin >> index;
        if (index < 0 || index >= count) {
            cout << "Invalid index. Please enter a valid index." << endl;
            return '\0';
        }
        char pickedMarble = p[index];
        cout << "Picked marble from index " << index << ": " << pickedMarble << endl;
        // Remove the picked marble from the container
        for (int i = index; i < count - 1; ++i) {
            p[i] = p[i + 1];
        }
        // Decrement the count to reflect the removal
        --count;
        return pickedMarble;
    }

    char pick_from_index(char p[], int& count, int index) {
        if (count == 0) {
            cout << "No marbles to pick. Container is empty." << endl;
            return '\0';
        }

        if (index < 0 || index >= count) {
            cout << "Invalid index. Please enter a valid index." << endl;
            return '\0';
        }

        char pickedMarble = p[index];
        cout << "Picked marble from index " << index << ": " << pickedMarble << endl;

        // Remove the picked marble from the container
        for (int i = index; i < count - 1; ++i) {
            p[i] = p[i + 1];
        }

        // Decrement the count to reflect the removal
        --count;

        return pickedMarble;
    }

};

void player1(Dispenser* obj, Gameboard& gameboard) {
    std::lock_guard<std::mutex> lock(mtx);
    cout << "Player 1 turn: " << endl;
    obj->pick_marble(p1, &p1_c, 1);  // Pass the address of p1_c
    obj->save_to_container(p1, p1_c);
    ++p1_c;
}

void player2(Dispenser* obj, Gameboard& gameboard) {
    std::lock_guard<std::mutex> lock(mtx);
    cout << "Player 2 turn: " << endl;
    obj->pick_marble(p2, &p2_c, 2);  // Pass the address of p2_c
    obj->save_to_container(p2, p2_c);
    ++p2_c;
}
void player_disp(char p[]) {
    for (int i = 0; p[i] != '\0'; ++i) {
        cout << p[i] << ' ';
    }
    cout << endl;
}

void display_player_potions(Gameboard& gameboard) {
    cout << "Player 1 has potions: " << name1 << ": " << gameboard.potion1.Healing[gameboard.player1_potion_index1]
        << ", " << name2 << ": " << gameboard.potion1.Courage[gameboard.player1_potion_index2] << endl;

    cout << "Player 2 has potions: " << name1 << ": " << gameboard.potion2.Healing[gameboard.player2_potion_index1]
        << ", " << name2 << ": " << gameboard.potion2.Courage[gameboard.player2_potion_index2] << endl;
}

void player_turn(Dispenser* obj, Gameboard& gameboard) {
    int ex = 0;
    int current_player = 1; // Start with Player 1
    while (ex != -1) {
        cout << "Press -1 to exit, 0 to continue, 1 to return marbles, 2 to pick from container, 3 pick from a specific index in the player's container (p1 or p2): ";
        cin >> ex;

        if (ex == -1) {
            exit(0);
        }
        else if (ex == 1) {
            cout << "Choose player (1 or 2) to return marbles: ";
            int player;
            cin >> player;
            if (player == 1) {
                obj->return_to_dispenser(p1, p1_c);
            }
            else if (player == 2) {
                obj->return_to_dispenser(p2, p2_c);
            }
        }
        else if (ex == 2) {
            cout << "Choose player (1 or 2) to pick from container: ";
            int player = 0;
            cin >> player;
            char marble = ' ';
            if (player == 1) {
                marble = obj->pick_from_container(p1, p1_c);
            }
            else if (player == 2) {
                marble = obj->pick_from_container(p2, p2_c);
            }
            // Add the picked marble to the potion
            gameboard.add_marble_to_potion(&marble, (player == 1) ? p1_c : p2_c, player);
        }
        else if (ex == 3) {
            cout << "Choose player (1 or 2) and enter index to pick from container: ";
            int player, index;
            cin >> player >> index;

            char marble = ' ';
            if (player == 1) {
                marble = obj->pick_from_index(p1, p1_c, index);
            }
            else if (player == 2) {
                marble = obj->pick_from_index(p2, p2_c, index);
            }
            // Add the picked marble to the potion
            gameboard.add_marble_to_potion(&marble, (player == 1) ? p1_c : p2_c, player);
        }

        obj->disp_grid();
        if (current_player == 1 && gameboard.potion1.isFull()) {
            cout << "Player 1 wins! Potion is full." << endl;
            exit(0); // Terminate the game
        }
        else if (current_player == 2 && gameboard.potion2.isFull()) {
            cout << "Player 2 wins! Potion is full." << endl;
            exit(0); // Terminate the game
        }

        if (current_player == 1) {
            std::thread t1(player1, obj, std::ref(gameboard));
            t1.join();
            cout << "\nIn player 1 grid: " << endl;
            player_disp(p1);
            current_player = 2; // Switch to Player 2
        }
        else {
            std::thread t2(player2, obj, std::ref(gameboard));
            t2.join();
            cout << "\nIn player 2 grid: " << endl;
            player_disp(p2);
            current_player = 1; // Switch to Player 1
        }
    }
}

int main() {
    Dispenser obj;
    obj.init_grid();

    Gameboard gameboard;

    display_player_potions(gameboard);

    player_turn(&obj, gameboard);

    cout << "\nplayer 1 grid: " << endl;
    player_disp(p1);
    cout << "\nplayer 2 grid: " << endl;
    player_disp(p2);

    return 0;
}














Part no 4


#include<iostream>
#include<random>
#include<algorithm> // for std::swap
#include<string>
#include <cstring>  // Add this line
#include<mutex>
#include<thread>
using namespace std;
void player_disp(char p[]);

char p1[25];
char p2[25];
int p1_c = 0;
int p2_c = 0;
int score1 = 0, score2 = 0;
int Healing_score = 2;
int Courage_score = 2;
int invisibility_score = 2;
int strength_score = 2;
string name1 = "Healing", name2 = "Courage", name3 = "invisibility", name4 = "strength";

mutex mtx;

void player_disp(char p[]);
int random_no();
class Potion {
public:
    char Healing[2];
    char Courage[2];
    char invisibility[2];
    char strength[2];

    Potion() {
        for (int i = 0; i < 2; ++i)
            Healing[i] = ' ';
        for (int i = 0; i < 2; ++i)
            Courage[i] = ' ';
        for (int i = 0; i < 2; ++i)
            invisibility[i] = ' ';
        for (int i = 0; i < 2; ++i)
            strength[i] = ' ';
    }
    // Modify the disp_potion function to accept the size of the array
    void disp_potion(char arr[], int size) {
        for (int i = 0; i < size; ++i) {
            cout << arr[i] << " ";
        }
    }

    // Inside the Potion class, update the call to disp_potion
    void disp_potion(char arr[]) {
        int size = 0;

        if (strcmp(arr, Healing) == 0) {
            size = sizeof(Healing) / sizeof(Healing[0]);
        }
        else if (arr == Courage) {
            size = sizeof(Courage) / sizeof(Courage[0]);
        }
        else if (arr == invisibility) {
            size = sizeof(invisibility) / sizeof(invisibility[0]);
        }
        else if (arr == strength) {
            size = sizeof(strength) / sizeof(strength[0]);
        }

        disp_potion(arr, size);
    }
    void calculate_score(const char* potion_name, int player_number) {
        if (player_number == 1) {
            if (strcmp(potion_name, "Healing") == 0) {
                score1 += Healing_score;
            }
            else if (strcmp(potion_name, "Courage") == 0) {
                score1 += Courage_score;
            }
        }
        else if (player_number == 2) {
            if (strcmp(potion_name, "invisibility") == 0) {
                score2 += invisibility_score;
            }
            else if (strcmp(potion_name, "strength") == 0) {
                score2 += strength_score;
            }
        }
    }

    bool isFull() {
        if (strcmp(Healing, "  ") == 0 && strcmp(Courage, "  ") == 0) {
            return true;  // Both Healing and Courage are full
        }
        else if (strcmp(invisibility, "  ") == 0 && strcmp(strength, "  ") == 0) {
            return true;  // Both Invisibility and Strength are full
        }
        else {
            return false;  // Neither combination is full
        }
    }

};


class Gameboard {
public:
    Potion potion1;
    Potion potion2;

    // Store which player has which potion
    int player1_potion_index1;
    int player1_potion_index2;
    int player2_potion_index1;
    int player2_potion_index2;

    Gameboard() : player1_potion_index1(0), player1_potion_index2(0),
        player2_potion_index1(0), player2_potion_index2(0) {}

    void add_marble_to_potion(char p[], int& player_count, int player_number) {
        int choice;
        char* selected_potion = nullptr;
        int* selected_index = nullptr;
        Potion* current_potion = nullptr;

        if (player_number == 1) {
            std::cout << "Player " << player_number << ", select a potion to add your marble to:" << std::endl;
            std::cout << "1. Healing" << std::endl;
            std::cout << "2. Courage" << std::endl;
            std::cin >> choice;

            if (choice == 1) {
                selected_index = &player1_potion_index1;
                current_potion = &potion1;
                selected_potion = potion1.Healing;
            }
            else if (choice == 2) {
                selected_index = &player1_potion_index2;
                current_potion = &potion1;
                selected_potion = potion1.Courage;
            }
            else {
                std::cout << "Invalid choice. Marble not added to any potion." << std::endl;
                return;
            }
        }
        else if (player_number == 2) {
            std::cout << "Player " << player_number << ", select a potion to add your marble to:" << std::endl;
            std::cout << "1. Invisibility" << std::endl;
            std::cout << "2. Strength" << std::endl;
            std::cin >> choice;

            if (choice == 1) {
                selected_index = &player2_potion_index1;
                current_potion = &potion2;
                selected_potion = potion2.invisibility;
            }
            else if (choice == 2) {
                selected_index = &player2_potion_index2;
                current_potion = &potion2;
                selected_potion = potion2.strength;
            }
            else {
                std::cout << "Invalid choice. Marble not added to any potion." << std::endl;
                return;
            }
        }
        else {
            std::cout << "Invalid player number. Marble not added to any potion." << std::endl;
            return;
        }


        if (*selected_index < sizeof(selected_potion) / sizeof(selected_potion[0])) {
            // Check if the potion is not full
            if (*selected_index < sizeof(selected_potion) / sizeof(selected_potion[0])) {
                // Add the marble to the selected potion
                selected_potion[*selected_index] = p[0];

                // Increment the index for the selected potion
                ++(*selected_index);

                // Remove the marble from the player's container
                for (int i = 0; i < player_count - 1; ++i) {
                    p[i] = p[i + 1];
                }

                // Decrement the count to reflect the removal
                --player_count;

                std::cout << "Marble added to the selected potion successfully!" << std::endl;

                // Display the updated potion
                std::cout << "Updated " << ((player_number == 1) ? "Healing" : "Invisibility") << " potion: ";
                current_potion->disp_potion(selected_potion, *selected_index);
                std::cout << std::endl;
            }

            // Check if the potion is full
            if (*selected_index == sizeof(selected_potion) / sizeof(selected_potion[0])) {
                std::cout << "Potion is full!" << std::endl;

                // Call calculate_score to update player's score
                current_potion->calculate_score((choice == 1) ? "Healing" : "Strength", player_number);

                // Reset the completed potion
                reset_potion(selected_potion, selected_index);

                // Return when the potion is full
                return;
            }
        }
        else {
            std::cout << "Selected potion is full. Marble not added." << std::endl;
        }
    }

    void reset_potion(char arr[], int* index) {
        std::memset(arr, ' ', *index);
        *index = 0;
    }
};
int random_no() {
    std::random_device rd;
    std::mt19937 eng(rd());
    std::uniform_int_distribution<> distr(0, 4);
    return distr(eng);
}

struct Marble {
    char color[5] = { 'R', 'Y', 'B', 'G', 'W' };
};

class Dispenser {
    char grid[5][5] = { " " };
    Marble m;
    char helper = ' ';
    mutex dispenserMutex; // Mutex to synchronize dispenser operations

public:
    void init_grid() {
        for (int i = 0; i < 5; ++i) {
            for (int j = 0; j < 5; ++j) {
                grid[i][j] = m.color[random_no()];
            }
        }
    }

    void pick_marble(char p[], int* current_player_count, int current_players) {
        int row, col;
        char pick_color;
        lock_guard<mutex> lock(dispenserMutex); // Lock the dispenser operations

        cout << "Enter row (-1 to exit): ";
        cin >> row;

        if (row == -1) {
            exit(0);
        }

        cout << "Enter col: ";
        cin >> col;

        pick_color = grid[row][col];
        helper = pick_color;
        grid[row][col] = 'x';
        pick_consecutive_marbles(row, col, pick_color, p, current_player_count, current_players);
        disp_grid();
    }

    char* save_to_container(char p[], int i) {
        p[i] = helper;
        cout << "Checking from save func: " << endl;
        return p;
    }

    void pick_consecutive_marbles(int row, int col, char color, char* current_player_container, int* current_player_count, int current_player) {
        char pickedColor = color;

        // Check below the picked marble
        for (int i = row + 1; i < 5 && grid[i][col] == pickedColor; ++i) {
            grid[i][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
        }

        // Check above the picked marble
        for (int i = row - 1; i >= 0 && grid[i][col] == pickedColor; --i) {
            grid[i][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
        }

        // Check if both above and below marbles have been picked
        int aboveRow = row - 1;
        int belowRow = row + 1;

        while (aboveRow >= 0 && grid[aboveRow][col] == pickedColor) {
            cout << "Picked marble with color: " << pickedColor << " at position (" << aboveRow << ", " << col << ")" << endl;
            grid[aboveRow][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
            --aboveRow;
        }

        while (belowRow < 5 && grid[belowRow][col] == pickedColor) {
            cout << "Picked marble with color: " << pickedColor << " at position (" << belowRow << ", " << col << ")" << endl;
            grid[belowRow][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
            ++belowRow;
        }

        // After placing 'x', check the grid to slide the 'x' upwards
        check_grid(col);

        // Print the picked marbles in the container of the current player
        cout << "\nIn player " << current_player << " container: " << endl;
        player_disp(current_player_container);
    }

    void check_grid(int j) {
        for (int i = 0; i < 5; ++i) {
            if (grid[i][j] == 'x') {
                slide_marble(i, j);
            }
        }
    }

    void slide_marble(int i, int j) {
        while (i > 0 && grid[i][j] == 'x') {
            swap(grid[i - 1][j], grid[i][j]);
            --i;
        }
    }

    void disp_grid() {
        cout << "  ";
        for (int j = 0; j < 5; ++j) {
            cout << j << " ";
        }
        cout << endl;

        for (int i = 0; i < 5; ++i) {
            cout << i << " ";
            for (int j = 0; j < 5; ++j) {
                cout << grid[i][j] << " ";
            }
            cout << endl;
        }
    }

    void return_to_dispenser(char p[], int& count) {
        mutex dispenserMutex; // Mutex to synchronize dispenser operations

        cout << "Returning marbles to dispenser..." << endl;

        for (int i = 0; i < count; ++i) {
            char returnedMarble = p[i];
            int row = 0, col = 0;

            // Find a position marked with 'x' in the dispenser
            do {
                row = random_no();
                col = random_no();
            } while (grid[row][col] != 'x');
            // Place the returned marble in the dispenser
            grid[row][col] = returnedMarble;
        }

        // Reset the player's container
        count = 0;
    }

    char pick_from_container(char p[], int& count) {
        lock_guard<mutex> lock(dispenserMutex); // Lock the dispenser operations

        if (count == 0) {
            cout << "No marbles to pick. Container is empty." << endl;
            return '\0';
        }
        int index;
        cout << "Enter the index to pick a marble (0 to " << count - 1 << "): ";
        cin >> index;
        if (index < 0 || index >= count) {
            cout << "Invalid index. Please enter a valid index." << endl;
            return '\0';
        }
        char pickedMarble = p[index];
        cout << "Picked marble from index " << index << ": " << pickedMarble << endl;
        // Remove the picked marble from the container
        for (int i = index; i < count - 1; ++i) {
            p[i] = p[i + 1];
        }
        // Decrement the count to reflect the removal
        --count;
        return pickedMarble;
    }

    char pick_from_index(char p[], int& count, int index) {
        if (count == 0) {
            cout << "No marbles to pick. Container is empty." << endl;
            return '\0';
        }

        if (index < 0 || index >= count) {
            cout << "Invalid index. Please enter a valid index." << endl;
            return '\0';
        }

        char pickedMarble = p[index];
        cout << "Picked marble from index " << index << ": " << pickedMarble << endl;

        // Remove the picked marble from the container
        for (int i = index; i < count - 1; ++i) {
            p[i] = p[i + 1];
        }

        // Decrement the count to reflect the removal
        --count;

        return pickedMarble;
    }

};

void player1(Dispenser* obj, Gameboard& gameboard) {
    std::lock_guard<std::mutex> lock(mtx);
    cout << "Player 1 turn: " << endl;
    obj->pick_marble(p1, &p1_c, 1);  // Pass the address of p1_c
    obj->save_to_container(p1, p1_c);
    ++p1_c;
}

void player2(Dispenser* obj, Gameboard& gameboard) {
    std::lock_guard<std::mutex> lock(mtx);
    cout << "Player 2 turn: " << endl;
    obj->pick_marble(p2, &p2_c, 2);  // Pass the address of p2_c
    obj->save_to_container(p2, p2_c);
    ++p2_c;
}
void player_disp(char p[]) {
    for (int i = 0; p[i] != '\0'; ++i) {
        cout << p[i] << ' ';
    }
    cout << endl;
}

void display_player_potions(Gameboard& gameboard) {
    cout << "Player 1 has potions: " << name1 << ": " << gameboard.potion1.Healing[gameboard.player1_potion_index1]
        << ", " << name2 << ": " << gameboard.potion1.Courage[gameboard.player1_potion_index2] << endl;

    cout << "Player 2 has potions: " << name1 << ": " << gameboard.potion2.Healing[gameboard.player2_potion_index1]
        << ", " << name2 << ": " << gameboard.potion2.Courage[gameboard.player2_potion_index2] << endl;
}

void player_turn(Dispenser* obj, Gameboard& gameboard) {
    int ex = 0;
    int current_player = 1; // Start with Player 1
    while (ex != -1) {
        cout << "Press -1 to exit, 0 to continue, 1 to return marbles, 2 to pick from container, 3 pick from a specific index in the player's container (p1 or p2): ";
        cin >> ex;

        if (ex == -1) {
            exit(0);
        }
        else if (ex == 1) {
            cout << "Choose player (1 or 2) to return marbles: ";
            int player;
            cin >> player;
            if (player == 1) {
                obj->return_to_dispenser(p1, p1_c);
            }
            else if (player == 2) {
                obj->return_to_dispenser(p2, p2_c);
            }
        }
        else if (ex == 2) {
            cout << "Choose player (1 or 2) to pick from container: ";
            int player = 0;
            cin >> player;
            char marble = ' ';
            if (player == 1) {
                marble = obj->pick_from_container(p1, p1_c);
            }
            else if (player == 2) {
                marble = obj->pick_from_container(p2, p2_c);
            }
            // Add the picked marble to the potion
            gameboard.add_marble_to_potion(&marble, (player == 1) ? p1_c : p2_c, player);
        }
        else if (ex == 3) {
            cout << "Choose player (1 or 2) and enter index to pick from container: ";
            int player, index;
            cin >> player >> index;

            char marble = ' ';
            if (player == 1) {
                marble = obj->pick_from_index(p1, p1_c, index);
            }
            else if (player == 2) {
                marble = obj->pick_from_index(p2, p2_c, index);
            }
            // Add the picked marble to the potion
            gameboard.add_marble_to_potion(&marble, (player == 1) ? p1_c : p2_c, player);
        }

        obj->disp_grid();
        if (current_player == 1 && gameboard.potion1.isFull()) {
            cout << "Player 1 wins! Potion is full." << endl;
            exit(0); // Terminate the game
        }
        else if (current_player == 2 && gameboard.potion2.isFull()) {
            cout << "Player 2 wins! Potion is full." << endl;
            exit(0); // Terminate the game
        }

        if (current_player == 1) {
            std::thread t1(player1, obj, std::ref(gameboard));
            t1.join();
            cout << "\nIn player 1 grid: " << endl;
            player_disp(p1);
            current_player = 2; // Switch to Player 2
        }
        else {
            std::thread t2(player2, obj, std::ref(gameboard));
            t2.join();
            cout << "\nIn player 2 grid: " << endl;
            player_disp(p2);
            current_player = 1; // Switch to Player 1
        }
    }
}

int main() {
    Dispenser obj;
    obj.init_grid();

    Gameboard gameboard;

    display_player_potions(gameboard);

    player_turn(&obj, gameboard);

    cout << "\nplayer 1 grid: " << endl;
    player_disp(p1);
    cout << "\nplayer 2 grid: " << endl;
    player_disp(p2);

    return 0;
}

























Code part 5
#include<iostream>
#include<random>
#include<algorithm> // for std::swap
#include<string>
#include <cstring>  // Add this line
#include<mutex>
#include<thread>
using namespace std;
void player_disp(char p[]);

char p1[25];
char p2[25];
int p1_c = 0;
int p2_c = 0;
int score1 = 0, score2 = 0;
int Healing_score = 2;
int Courage_score = 2;
int invisibility_score = 2;
int strength_score = 2;
string name1 = "Healing", name2 = "Courage", name3 = "invisibility", name4 = "strength";

mutex mtx;

void player_disp(char p[]);
int random_no();
class Potion {
public:
    char Healing[2];
    char Courage[2];
    char invisibility[2];
    char strength[2];
    mutex potionMutex;

    Potion() {
        for (int i = 0; i < 2; ++i)
            Healing[i] = ' ';
        for (int i = 0; i < 2; ++i)
            Courage[i] = ' ';
        for (int i = 0; i < 2; ++i)
            invisibility[i] = ' ';
        for (int i = 0; i < 2; ++i)
            strength[i] = ' ';
    }
    // Modify the disp_potion function to accept the size of the array
    void disp_potion(char arr[], int size) {
        lock_guard<mutex> lock(potionMutex);
        for (int i = 0; i < size; ++i) {
            cout << arr[i] << " ";
        }
    }

    // Inside the Potion class, update the call to disp_potion
    void disp_potion(char arr[]) {
        int size = 0;

        if (strcmp(arr, Healing) == 0) {
            size = sizeof(Healing) / sizeof(Healing[0]);
        }
        else if (arr == Courage) {
            size = sizeof(Courage) / sizeof(Courage[0]);
        }
        else if (arr == invisibility) {
            size = sizeof(invisibility) / sizeof(invisibility[0]);
        }
        else if (arr == strength) {
            size = sizeof(strength) / sizeof(strength[0]);
        }

        disp_potion(arr, size);
    }
    void calculate_score(const char* potion_name, int player_number) {
        lock_guard<mutex> lock(potionMutex);
        if (player_number == 1) {
            if (strcmp(potion_name, "Healing") == 0) {
                score1 += Healing_score;
            }
            else if (strcmp(potion_name, "Courage") == 0) {
                score1 += Courage_score;
            }
        }
        else if (player_number == 2) {
            if (strcmp(potion_name, "invisibility") == 0) {
                score2 += invisibility_score;
            }
            else if (strcmp(potion_name, "strength") == 0) {
                score2 += strength_score;
            }
        }
    }

    bool isFull() {
        lock_guard<mutex> lock(potionMutex);
        if (strcmp(Healing, "  ") == 0 && strcmp(Courage, "  ") == 0) {
            return true;  // Both Healing and Courage are full
        }
        else if (strcmp(invisibility, "  ") == 0 && strcmp(strength, "  ") == 0) {
            return true;  // Both Invisibility and Strength are full
        }
        else {
            return false;  // Neither combination is full
        }
    }

};


class Gameboard {
public:
    Potion potion1;
    Potion potion2;

    // Store which player has which potion
    int player1_potion_index1;
    int player1_potion_index2;
    int player2_potion_index1;
    int player2_potion_index2;

    Gameboard() : player1_potion_index1(0), player1_potion_index2(0),
        player2_potion_index1(0), player2_potion_index2(0) {}

    void add_marble_to_potion(char p[], int& player_count, int player_number) {
        int choice;
        char* selected_potion = nullptr;
        int* selected_index = nullptr;
        Potion* current_potion = nullptr;

        if (player_number == 1) {
            std::cout << "Player " << player_number << ", select a potion to add your marble to:" << std::endl;
            std::cout << "1. Healing" << std::endl;
            std::cout << "2. Courage" << std::endl;
            std::cin >> choice;

            if (choice == 1) {
                selected_index = &player1_potion_index1;
                current_potion = &potion1;
                selected_potion = potion1.Healing;
            }
            else if (choice == 2) {
                selected_index = &player1_potion_index2;
                current_potion = &potion1;
                selected_potion = potion1.Courage;
            }
            else {
                std::cout << "Invalid choice. Marble not added to any potion." << std::endl;
                return;
            }
        }
        else if (player_number == 2) {
            std::cout << "Player " << player_number << ", select a potion to add your marble to:" << std::endl;
            std::cout << "1. Invisibility" << std::endl;
            std::cout << "2. Strength" << std::endl;
            std::cin >> choice;

            if (choice == 1) {
                selected_index = &player2_potion_index1;
                current_potion = &potion2;
                selected_potion = potion2.invisibility;
            }
            else if (choice == 2) {
                selected_index = &player2_potion_index2;
                current_potion = &potion2;
                selected_potion = potion2.strength;
            }
            else {
                std::cout << "Invalid choice. Marble not added to any potion." << std::endl;
                return;
            }
        }
        else {
            std::cout << "Invalid player number. Marble not added to any potion." << std::endl;
            return;
        }


        if (*selected_index < sizeof(selected_potion) / sizeof(selected_potion[0])) {
            // Check if the potion is not full
            if (*selected_index < sizeof(selected_potion) / sizeof(selected_potion[0])) {
                // Add the marble to the selected potion
                selected_potion[*selected_index] = p[0];

                // Increment the index for the selected potion
                ++(*selected_index);

                // Remove the marble from the player's container
                for (int i = 0; i < player_count - 1; ++i) {
                    p[i] = p[i + 1];
                }

                // Decrement the count to reflect the removal
                --player_count;

                std::cout << "Marble added to the selected potion successfully!" << std::endl;

                // Display the updated potion
                std::cout << "Updated " << ((player_number == 1) ? "Healing" : "Invisibility") << " potion: ";
                current_potion->disp_potion(selected_potion, *selected_index);
                std::cout << std::endl;
            }

            // Check if the potion is full
            if (*selected_index == sizeof(selected_potion) / sizeof(selected_potion[0])) {
                std::cout << "Potion is full!" << std::endl;

                // Call calculate_score to update player's score
                current_potion->calculate_score((choice == 1) ? "Healing" : "Strength", player_number);

                // Reset the completed potion
                reset_potion(selected_potion, selected_index);

                // Return when the potion is full
                return;
            }
        }
        else {
            std::cout << "Selected potion is full. Marble not added." << std::endl;
        }
    }

    void reset_potion(char arr[], int* index) {
        std::memset(arr, ' ', *index);
        *index = 0;
    }
};
int random_no() {
    std::random_device rd;
    std::mt19937 eng(rd());
    std::uniform_int_distribution<> distr(0, 4);
    return distr(eng);
}

struct Marble {
    char color[5] = { 'R', 'Y', 'B', 'G', 'W' };
};

class Dispenser {
    char grid[5][5] = { " " };
    Marble m;
    char helper = ' ';
    mutex dispenserMutex; // Mutex to synchronize dispenser operations

public:
    void init_grid() {
        for (int i = 0; i < 5; ++i) {
            for (int j = 0; j < 5; ++j) {
                grid[i][j] = m.color[random_no()];
            }
        }
    }

    void pick_marble(char p[], int* current_player_count, int current_players) {
        int row, col;
        char pick_color;
        lock_guard<mutex> lock(dispenserMutex); // Lock the dispenser operations

        cout << "Enter row (-1 to exit): ";
        cin >> row;

        if (row == -1) {
            exit(0);
        }

        cout << "Enter col: ";
        cin >> col;

        pick_color = grid[row][col];
        helper = pick_color;
        grid[row][col] = 'x';
        pick_consecutive_marbles(row, col, pick_color, p, current_player_count, current_players);
        disp_grid();
    }

    char* save_to_container(char p[], int i) {
        p[i] = helper;
        cout << "Checking from save func: " << endl;
        return p;
    }

    void pick_consecutive_marbles(int row, int col, char color, char* current_player_container, int* current_player_count, int current_player) {
        char pickedColor = color;

        // Check below the picked marble
        for (int i = row + 1; i < 5 && grid[i][col] == pickedColor; ++i) {
            grid[i][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
        }

        // Check above the picked marble
        for (int i = row - 1; i >= 0 && grid[i][col] == pickedColor; --i) {
            grid[i][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
        }

        // Check if both above and below marbles have been picked
        int aboveRow = row - 1;
        int belowRow = row + 1;

        while (aboveRow >= 0 && grid[aboveRow][col] == pickedColor) {
            cout << "Picked marble with color: " << pickedColor << " at position (" << aboveRow << ", " << col << ")" << endl;
            grid[aboveRow][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
            --aboveRow;
        }

        while (belowRow < 5 && grid[belowRow][col] == pickedColor) {
            cout << "Picked marble with color: " << pickedColor << " at position (" << belowRow << ", " << col << ")" << endl;
            grid[belowRow][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
            ++belowRow;
        }

        // After placing 'x', check the grid to slide the 'x' upwards
        check_grid(col);

        // Print the picked marbles in the container of the current player
        cout << "\nIn player " << current_player << " container: " << endl;
        player_disp(current_player_container);
    }

    void check_grid(int j) {
        for (int i = 0; i < 5; ++i) {
            if (grid[i][j] == 'x') {
                slide_marble(i, j);
            }
        }
    }

    void slide_marble(int i, int j) {
        while (i > 0 && grid[i][j] == 'x') {
            swap(grid[i - 1][j], grid[i][j]);
            --i;
        }
    }

    void disp_grid() {
        cout << "  ";
        for (int j = 0; j < 5; ++j) {
            cout << j << " ";
        }
        cout << endl;

        for (int i = 0; i < 5; ++i) {
            cout << i << " ";
            for (int j = 0; j < 5; ++j) {
                cout << grid[i][j] << " ";
            }
            cout << endl;
        }
    }

    void return_to_dispenser(char p[], int& count) {
        mutex dispenserMutex; // Mutex to synchronize dispenser operations

        cout << "Returning marbles to dispenser..." << endl;

        for (int i = 0; i < count; ++i) {
            char returnedMarble = p[i];
            int row = 0, col = 0;

            // Find a position marked with 'x' in the dispenser
            do {
                row = random_no();
                col = random_no();
            } while (grid[row][col] != 'x');
            // Place the returned marble in the dispenser
            grid[row][col] = returnedMarble;
        }

        // Reset the player's container
        count = 0;
    }

    char pick_from_container(char p[], int& count) {
        lock_guard<mutex> lock(dispenserMutex); // Lock the dispenser operations

        if (count == 0) {
            cout << "No marbles to pick. Container is empty." << endl;
            return '\0';
        }
        int index;
        cout << "Enter the index to pick a marble (0 to " << count - 1 << "): ";
        cin >> index;
        if (index < 0 || index >= count) {
            cout << "Invalid index. Please enter a valid index." << endl;
            return '\0';
        }
        char pickedMarble = p[index];
        cout << "Picked marble from index " << index << ": " << pickedMarble << endl;
        // Remove the picked marble from the container
        for (int i = index; i < count - 1; ++i) {
            p[i] = p[i + 1];
        }
        // Decrement the count to reflect the removal
        --count;
        return pickedMarble;
    }

    char pick_from_index(char p[], int& count, int index) {
        if (count == 0) {
            cout << "No marbles to pick. Container is empty." << endl;
            return '\0';
        }

        if (index < 0 || index >= count) {
            cout << "Invalid index. Please enter a valid index." << endl;
            return '\0';
        }

        char pickedMarble = p[index];
        cout << "Picked marble from index " << index << ": " << pickedMarble << endl;

        // Remove the picked marble from the container
        for (int i = index; i < count - 1; ++i) {
            p[i] = p[i + 1];
        }

        // Decrement the count to reflect the removal
        --count;

        return pickedMarble;
    }

};

void player1(Dispenser* obj, Gameboard& gameboard) {
    std::lock_guard<std::mutex> lock(mtx);
    cout << "Player 1 turn: " << endl;
    obj->pick_marble(p1, &p1_c, 1);  // Pass the address of p1_c
    obj->save_to_container(p1, p1_c);
    ++p1_c;
}

void player2(Dispenser* obj, Gameboard& gameboard) {
    std::lock_guard<std::mutex> lock(mtx);
    cout << "Player 2 turn: " << endl;
    obj->pick_marble(p2, &p2_c, 2);  // Pass the address of p2_c
    obj->save_to_container(p2, p2_c);
    ++p2_c;
}
void player_disp(char p[]) {
    for (int i = 0; p[i] != '\0'; ++i) {
        cout << p[i] << ' ';
    }
    cout << endl;
}

void display_player_potions(Gameboard& gameboard) {
    cout << "Player 1 has potions: " << name1 << ": " << gameboard.potion1.Healing[gameboard.player1_potion_index1]
        << ", " << name2 << ": " << gameboard.potion1.Courage[gameboard.player1_potion_index2] << endl;

    cout << "Player 2 has potions: " << name1 << ": " << gameboard.potion2.Healing[gameboard.player2_potion_index1]
        << ", " << name2 << ": " << gameboard.potion2.Courage[gameboard.player2_potion_index2] << endl;
}

void player_turn(Dispenser* obj, Gameboard& gameboard) {
    int ex = 0;
    int current_player = 1; // Start with Player 1
    while (ex != -1) {
        cout << "Press -1 to exit, 0 to continue, 1 to return marbles, 2 to pick from container, 3 pick from a specific index in the player's container (p1 or p2): ";
        cin >> ex;

        if (ex == -1) {
            exit(0);
        }
        else if (ex == 1) {
            cout << "Choose player (1 or 2) to return marbles: ";
            int player;
            cin >> player;
            if (player == 1) {
                obj->return_to_dispenser(p1, p1_c);
            }
            else if (player == 2) {
                obj->return_to_dispenser(p2, p2_c);
            }
        }
        else if (ex == 2) {
            cout << "Choose player (1 or 2) to pick from container: ";
            int player = 0;
            cin >> player;
            char marble = ' ';
            if (player == 1) {
                marble = obj->pick_from_container(p1, p1_c);
            }
            else if (player == 2) {
                marble = obj->pick_from_container(p2, p2_c);
            }
            // Add the picked marble to the potion
            gameboard.add_marble_to_potion(&marble, (player == 1) ? p1_c : p2_c, player);
        }
        else if (ex == 3) {
            cout << "Choose player (1 or 2) and enter index to pick from container: ";
            int player, index;
            cin >> player >> index;

            char marble = ' ';
            if (player == 1) {
                marble = obj->pick_from_index(p1, p1_c, index);
            }
            else if (player == 2) {
                marble = obj->pick_from_index(p2, p2_c, index);
            }
            // Add the picked marble to the potion
            gameboard.add_marble_to_potion(&marble, (player == 1) ? p1_c : p2_c, player);
        }

        obj->disp_grid();
        if (current_player == 1 && gameboard.potion1.isFull()) {
            cout << "Player 1 wins! Potion is full." << endl;
            exit(0); // Terminate the game
        }
        else if (current_player == 2 && gameboard.potion2.isFull()) {
            cout << "Player 2 wins! Potion is full." << endl;
            exit(0); // Terminate the game
        }

        if (current_player == 1) {
            std::thread t1(player1, obj, std::ref(gameboard));
            t1.join();
            cout << "\nIn player 1 grid: " << endl;
            player_disp(p1);
            current_player = 2; // Switch to Player 2
        }
        else {
            std::thread t2(player2, obj, std::ref(gameboard));
            t2.join();
            cout << "\nIn player 2 grid: " << endl;
            player_disp(p2);
            current_player = 1; // Switch to Player 1
        }
    }
}

int main() {
    Dispenser obj;
    obj.init_grid();

    Gameboard gameboard;

    display_player_potions(gameboard);

    player_turn(&obj, gameboard);

    cout << "\nplayer 1 grid: " << endl;
    player_disp(p1);
    cout << "\nplayer 2 grid: " << endl;
    player_disp(p2);

    return 0;
}








#include<iostream>
#include<random>
#include<algorithm> // for std::swap
#include<string>
#include <cstring>  // Add this line
#include<mutex>
#include<thread>
using namespace std;
void player_disp(char p[]);

char p1[25];
char p2[25];
int p1_c = 0;
int p2_c = 0;
int score1 = 0, score2 = 0;
int Healing_score = 2;
int Courage_score = 2;
int invisibility_score = 2;
int strength_score = 2;
string name1 = "Healing", name2 = "Courage", name3 = "invisibility", name4 = "strength";

mutex mtx;

void player_disp(char p[]);
int random_no();
class Potion {
public:
    char Healing[2];
    char Courage[2];
    char invisibility[2];
    char strength[2];
    mutex potionMutex;

    Potion() {
        for (int i = 0; i < 2; ++i)
            Healing[i] = ' ';
        for (int i = 0; i < 2; ++i)
            Courage[i] = ' ';
        for (int i = 0; i < 2; ++i)
            invisibility[i] = ' ';
        for (int i = 0; i < 2; ++i)
            strength[i] = ' ';
    }
    // Modify the disp_potion function to accept the size of the array
    void disp_potion(char arr[], int size) {
        lock_guard<mutex> lock(potionMutex);
        for (int i = 0; i < size; ++i) {
            cout << arr[i] << " ";
        }
    }

    // Inside the Potion class, update the call to disp_potion
    void disp_potion(char arr[]) {
        int size = 0;

        if (strcmp(arr, Healing) == 0) {
            size = sizeof(Healing) / sizeof(Healing[0]);
        }
        else if (arr == Courage) {
            size = sizeof(Courage) / sizeof(Courage[0]);
        }
        else if (arr == invisibility) {
            size = sizeof(invisibility) / sizeof(invisibility[0]);
        }
        else if (arr == strength) {
            size = sizeof(strength) / sizeof(strength[0]);
        }

        disp_potion(arr, size);
    }
    void calculate_score(const char* potion_name, int player_number) {
        lock_guard<mutex> lock(potionMutex);
        if (player_number == 1) {
            if (strcmp(potion_name, "Healing") == 0) {
                score1 += Healing_score;
            }
            else if (strcmp(potion_name, "Courage") == 0) {
                score1 += Courage_score;
            }
        }
        else if (player_number == 2) {
            if (strcmp(potion_name, "invisibility") == 0) {
                score2 += invisibility_score;
            }
            else if (strcmp(potion_name, "strength") == 0) {
                score2 += strength_score;
            }
        }
    }

    bool isFull() {
        lock_guard<mutex> lock(potionMutex);
        if (strcmp(Healing, "  ") == 0 && strcmp(Courage, "  ") == 0) {
            return true;  // Both Healing and Courage are full
        }
        else if (strcmp(invisibility, "  ") == 0 && strcmp(strength, "  ") == 0) {
            return true;  // Both Invisibility and Strength are full
        }
        else {
            return false;  // Neither combination is full
        }
    }

};


class Gameboard {
public:
    Potion potion1;
    Potion potion2;

    // Store which player has which potion
    int player1_potion_index1;
    int player1_potion_index2;
    int player2_potion_index1;
    int player2_potion_index2;

    Gameboard() : player1_potion_index1(0), player1_potion_index2(0),
        player2_potion_index1(0), player2_potion_index2(0) {}

    void add_marble_to_potion(char p[], int& player_count, int player_number) {
        int choice;
        char* selected_potion = nullptr;
        int* selected_index = nullptr;
        Potion* current_potion = nullptr;

        if (player_number == 1) {
            std::cout << "Player " << player_number << ", select a potion to add your marble to:" << std::endl;
            std::cout << "1. Healing" << std::endl;
            std::cout << "2. Courage" << std::endl;
            std::cin >> choice;

            if (choice == 1) {
                selected_index = &player1_potion_index1;
                current_potion = &potion1;
                selected_potion = potion1.Healing;
            }
            else if (choice == 2) {
                selected_index = &player1_potion_index2;
                current_potion = &potion1;
                selected_potion = potion1.Courage;
            }
            else {
                std::cout << "Invalid choice. Marble not added to any potion." << std::endl;
                return;
            }
        }
        else if (player_number == 2) {
            std::cout << "Player " << player_number << ", select a potion to add your marble to:" << std::endl;
            std::cout << "1. Invisibility" << std::endl;
            std::cout << "2. Strength" << std::endl;
            std::cin >> choice;

            if (choice == 1) {
                selected_index = &player2_potion_index1;
                current_potion = &potion2;
                selected_potion = potion2.invisibility;
            }
            else if (choice == 2) {
                selected_index = &player2_potion_index2;
                current_potion = &potion2;
                selected_potion = potion2.strength;
            }
            else {
                std::cout << "Invalid choice. Marble not added to any potion." << std::endl;
                return;
            }
        }
        else {
            std::cout << "Invalid player number. Marble not added to any potion." << std::endl;
            return;
        }


        if (*selected_index < sizeof(selected_potion) / sizeof(selected_potion[0])) {
            // Check if the potion is not full
            if (*selected_index < sizeof(selected_potion) / sizeof(selected_potion[0])) {
                // Add the marble to the selected potion
                selected_potion[*selected_index] = p[0];

                // Increment the index for the selected potion
                ++(*selected_index);

                // Remove the marble from the player's container
                for (int i = 0; i < player_count - 1; ++i) {
                    p[i] = p[i + 1];
                }

                // Decrement the count to reflect the removal
                --player_count;

                std::cout << "Marble added to the selected potion successfully!" << std::endl;

                // Display the updated potion
                std::cout << "Updated " << ((player_number == 1) ? "Healing" : "Invisibility") << " potion: ";
                current_potion->disp_potion(selected_potion, *selected_index);
                std::cout << std::endl;
            }

            // Check if the potion is full
            if (*selected_index == sizeof(selected_potion) / sizeof(selected_potion[0])) {
                std::cout << "Potion is full!" << std::endl;

                // Call calculate_score to update player's score
                current_potion->calculate_score((choice == 1) ? "Healing" : "Strength", player_number);

                // Reset the completed potion
                reset_potion(selected_potion, selected_index);

                // Return when the potion is full
                return;
            }
        }
        else {
            std::cout << "Selected potion is full. Marble not added." << std::endl;
        }
    }

    void reset_potion(char arr[], int* index) {
        std::memset(arr, ' ', *index);
        *index = 0;
    }
};
int random_no() {
    std::random_device rd;
    std::mt19937 eng(rd());
    std::uniform_int_distribution<> distr(0, 4);
    return distr(eng);
}

struct Marble {
    char color[5] = { 'R', 'Y', 'B', 'G', 'W' };
};

class Dispenser {
    char grid[5][5] = { " " };
    Marble m;
    char helper = ' ';
    mutex dispenserMutex; // Mutex to synchronize dispenser operations

public:
    void init_grid() {
        for (int i = 0; i < 5; ++i) {
            for (int j = 0; j < 5; ++j) {
                grid[i][j] = m.color[random_no()];
            }
        }
    }

    void pick_marble(char p[], int* current_player_count, int current_players) {
        int row, col;
        char pick_color;
        lock_guard<mutex> lock(dispenserMutex); // Lock the dispenser operations

        cout << "Enter row (-1 to exit): ";
        cin >> row;

        if (row == -1) {
            exit(0);
        }

        cout << "Enter col: ";
        cin >> col;

        pick_color = grid[row][col];
        helper = pick_color;
        grid[row][col] = 'x';
        pick_consecutive_marbles(row, col, pick_color, p, current_player_count, current_players);
        disp_grid();
    }

    char* save_to_container(char p[], int i) {
        p[i] = helper;
        cout << "Checking from save func: " << endl;
        return p;
    }

    void pick_consecutive_marbles(int row, int col, char color, char* current_player_container, int* current_player_count, int current_player) {
        char pickedColor = color;

        // Check below the picked marble
        for (int i = row + 1; i < 5 && grid[i][col] == pickedColor; ++i) {
            grid[i][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
        }

        // Check above the picked marble
        for (int i = row - 1; i >= 0 && grid[i][col] == pickedColor; --i) {
            grid[i][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
        }

        // Check if both above and below marbles have been picked
        int aboveRow = row - 1;
        int belowRow = row + 1;

        while (aboveRow >= 0 && grid[aboveRow][col] == pickedColor) {
            cout << "Picked marble with color: " << pickedColor << " at position (" << aboveRow << ", " << col << ")" << endl;
            grid[aboveRow][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
            --aboveRow;
        }

        while (belowRow < 5 && grid[belowRow][col] == pickedColor) {
            cout << "Picked marble with color: " << pickedColor << " at position (" << belowRow << ", " << col << ")" << endl;
            grid[belowRow][col] = 'x';
            current_player_container[*current_player_count] = pickedColor;
            ++(*current_player_count);
            ++belowRow;
        }

        // After placing 'x', check the grid to slide the 'x' upwards
        check_grid(col);

        // Print the picked marbles in the container of the current player
        cout << "\nIn player " << current_player << " container: " << endl;
        player_disp(current_player_container);
    }

    void check_grid(int j) {
        for (int i = 0; i < 5; ++i) {
            if (grid[i][j] == 'x') {
                slide_marble(i, j);
            }
        }
    }

    void slide_marble(int i, int j) {
        while (i > 0 && grid[i][j] == 'x') {
            swap(grid[i - 1][j], grid[i][j]);
            --i;
        }
    }

    void disp_grid() {
        cout << "  ";
        for (int j = 0; j < 5; ++j) {
            cout << j << " ";
        }
        cout << endl;

        for (int i = 0; i < 5; ++i) {
            cout << i << " ";
            for (int j = 0; j < 5; ++j) {
                cout << grid[i][j] << " ";
            }
            cout << endl;
        }
    }

    void return_to_dispenser(char p[], int& count) {
        mutex dispenserMutex; // Mutex to synchronize dispenser operations

        cout << "Returning marbles to dispenser..." << endl;

        for (int i = 0; i < count; ++i) {
            char returnedMarble = p[i];
            int row = 0, col = 0;

            // Find a position marked with 'x' in the dispenser
            do {
                row = random_no();
                col = random_no();
            } while (grid[row][col] != 'x');
            // Place the returned marble in the dispenser
            grid[row][col] = returnedMarble;
        }

        // Reset the player's container
        count = 0;
    }

    char pick_from_container(char p[], int& count) {
        lock_guard<mutex> lock(dispenserMutex); // Lock the dispenser operations

        if (count == 0) {
            cout << "No marbles to pick. Container is empty." << endl;
            return '\0';
        }
        int index;
        cout << "Enter the index to pick a marble (0 to " << count - 1 << "): ";
        cin >> index;
        if (index < 0 || index >= count) {
            cout << "Invalid index. Please enter a valid index." << endl;
            return '\0';
        }
        char pickedMarble = p[index];
        cout << "Picked marble from index " << index << ": " << pickedMarble << endl;
        // Remove the picked marble from the container
        for (int i = index; i < count - 1; ++i) {
            p[i] = p[i + 1];
        }
        // Decrement the count to reflect the removal
        --count;
        return pickedMarble;
    }

    char pick_from_index(char p[], int& count, int index) {
        if (count == 0) {
            cout << "No marbles to pick. Container is empty." << endl;
            return '\0';
        }

        if (index < 0 || index >= count) {
            cout << "Invalid index. Please enter a valid index." << endl;
            return '\0';
        }

        char pickedMarble = p[index];
        cout << "Picked marble from index " << index << ": " << pickedMarble << endl;

        // Remove the picked marble from the container
        for (int i = index; i < count - 1; ++i) {
            p[i] = p[i + 1];
        }

        // Decrement the count to reflect the removal
        --count;

        return pickedMarble;
    }

};

void player1(Dispenser* obj, Gameboard& gameboard) {
    std::lock_guard<std::mutex> lock(mtx);
    cout << "Player 1 turn: " << endl;
    obj->pick_marble(p1, &p1_c, 1);  // Pass the address of p1_c
    obj->save_to_container(p1, p1_c);
    ++p1_c;
}

void player2(Dispenser* obj, Gameboard& gameboard) {
    std::lock_guard<std::mutex> lock(mtx);
    cout << "Player 2 turn: " << endl;
    obj->pick_marble(p2, &p2_c, 2);  // Pass the address of p2_c
    obj->save_to_container(p2, p2_c);
    ++p2_c;
}
void player_disp(char p[]) {
    for (int i = 0; p[i] != '\0'; ++i) {
        cout << p[i] << ' ';
    }
    cout << endl;
}

void display_player_potions(Gameboard& gameboard) {
    cout << "Player 1 has potions: " << name1 << ": " << gameboard.potion1.Healing[gameboard.player1_potion_index1]
        << ", " << name2 << ": " << gameboard.potion1.Courage[gameboard.player1_potion_index2] << endl;

    cout << "Player 2 has potions: " << name1 << ": " << gameboard.potion2.Healing[gameboard.player2_potion_index1]
        << ", " << name2 << ": " << gameboard.potion2.Courage[gameboard.player2_potion_index2] << endl;
}

void player_turn(Dispenser* obj, Gameboard& gameboard) {
    int ex = 0;
    int current_player = 1; // Start with Player 1
    while (ex != -1) {
        cout << "Press -1 to exit, 0 to continue, 1 to return marbles, 2 to pick from container, 3 pick from a specific index in the player's container (p1 or p2): ";
        cin >> ex;

        if (ex == -1) {
            exit(0);
        }
        else if (ex == 1) {
            cout << "Choose player (1 or 2) to return marbles: ";
            int player;
            cin >> player;
            if (player == 1) {
                obj->return_to_dispenser(p1, p1_c);
            }
            else if (player == 2) {
                obj->return_to_dispenser(p2, p2_c);
            }
        }
        else if (ex == 2) {
            cout << "Choose player (1 or 2) to pick from container: ";
            int player = 0;
            cin >> player;
            char marble = ' ';
            if (player == 1) {
                marble = obj->pick_from_container(p1, p1_c);
            }
            else if (player == 2) {
                marble = obj->pick_from_container(p2, p2_c);
            }
            // Add the picked marble to the potion
            gameboard.add_marble_to_potion(&marble, (player == 1) ? p1_c : p2_c, player);
        }
        else if (ex == 3) {
            cout << "Choose player (1 or 2) and enter index to pick from container: ";
            int player, index;
            cin >> player >> index;

            char marble = ' ';
            if (player == 1) {
                marble = obj->pick_from_index(p1, p1_c, index);
            }
            else if (player == 2) {
                marble = obj->pick_from_index(p2, p2_c, index);
            }
            // Add the picked marble to the potion
            gameboard.add_marble_to_potion(&marble, (player == 1) ? p1_c : p2_c, player);
        }

        obj->disp_grid();
        if (current_player == 1 && gameboard.potion1.isFull()) {
            cout << "Player 1 wins! Potion is full." << endl;
            exit(0); // Terminate the game
        }
        else if (current_player == 2 && gameboard.potion2.isFull()) {
            cout << "Player 2 wins! Potion is full." << endl;
            exit(0); // Terminate the game
        }

        if (current_player == 1) {
            std::thread t1(player1, obj, std::ref(gameboard));
            t1.join();
            cout << "\nIn player 1 grid: " << endl;
            player_disp(p1);
            current_player = 2; // Switch to Player 2
        }
        else {
            std::thread t2(player2, obj, std::ref(gameboard));
            t2.join();
            cout << "\nIn player 2 grid: " << endl;
            player_disp(p2);
            current_player = 1; // Switch to Player 1
        }
    }
}

int main() {
    Dispenser obj;
    obj.init_grid();

    Gameboard gameboard;

    display_player_potions(gameboard);

    player_turn(&obj, gameboard);

    cout << "\nplayer 1 grid: " << endl;
    player_disp(p1);
    cout << "\nplayer 2 grid: " << endl;
    player_disp(p2);

    return 0;
}
